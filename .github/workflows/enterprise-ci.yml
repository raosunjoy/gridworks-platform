name: TradeMate Enterprise CI/CD Pipeline
# 100% Test Coverage | Lightning Fast | Ultra Secure | Enterprise Grade

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==================== CODE QUALITY & SECURITY ====================
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Code formatting check (Black)
      run: black --check --diff app tests
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff app tests
    
    - name: Linting (flake8)
      run: flake8 app tests --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type checking (mypy)
      run: mypy app --ignore-missing-imports
    
    - name: Security scan (bandit)
      run: bandit -r app -f json -o bandit-report.json
    
    - name: Dependency security check (safety)
      run: safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ==================== UNIT TESTS ====================
  unit-tests:
    name: Unit Tests (100% Coverage)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: trademate_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/trademate_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ENCRYPTION_KEY: dGVzdC1lbmNyeXB0aW9uLWtleS1mb3ItY2k=
        AUDIT_ENCRYPTION_KEY: dGVzdC1hdWRpdC1rZXktZm9yLWNp
      run: |
        # Run database migrations
        alembic upgrade head
    
    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/trademate_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ENCRYPTION_KEY: dGVzdC1lbmNyeXB0aW9uLWtleS1mb3ItY2k=
        AUDIT_ENCRYPTION_KEY: dGVzdC1hdWRpdC1rZXktZm9yLWNp
      run: |
        pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=100 \
          --junitxml=pytest-report.xml \
          --benchmark-json=benchmark-report.json \
          -m "unit or integration" \
          --durations=20 \
          -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          coverage.xml
          pytest-report.xml
          benchmark-report.json
          coverage_html/

  # ==================== PERFORMANCE TESTS ====================
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Run performance benchmarks
      env:
        DATABASE_URL: sqlite:///test.db
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-for-performance
      run: |
        pytest tests/ \
          -m "performance" \
          --benchmark-json=performance-report.json \
          --benchmark-sort=mean \
          --benchmark-min-rounds=10
    
    - name: Run load tests
      run: |
        # Start the application in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Run load tests
        locust -f tests/load_tests.py \
          --host=http://localhost:8000 \
          --users=100 \
          --spawn-rate=10 \
          --run-time=60s \
          --html=load-test-report.html \
          --headless
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          performance-report.json
          load-test-report.html

  # ==================== SECURITY TESTS ====================
  security-tests:
    name: Security & Penetration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-security semgrep
    
    - name: Run security tests
      run: |
        pytest tests/ -m "security" -v
    
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'TradeMate'
        path: '.'
        format: 'JSON'
        out: 'dependency-check-report'
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-reports
        path: |
          semgrep-report.json
          dependency-check-report/

  # ==================== E2E TESTS ====================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: [unit-tests, performance-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: trademate_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up E2E environment
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/trademate_e2e
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-e2e
      run: |
        alembic upgrade head
    
    - name: Start application
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/trademate_e2e
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-e2e
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 15
    
    - name: Run E2E tests
      run: |
        pytest tests/ \
          -m "e2e" \
          --junitxml=e2e-report.xml \
          -v
    
    - name: Upload E2E test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-reports
        path: e2e-report.xml

  # ==================== BUILD & DEPLOY ====================
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [security-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ==================== DEPLOYMENT ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add deployment steps here
        # e.g., kubectl apply, terraform apply, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add production deployment steps here
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check validation

  # ==================== NOTIFICATION ====================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, performance-tests, security-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.unit-tests.result == 'success' && needs.security-tests.result == 'success'
      run: |
        echo "✅ All tests passed! Ready for deployment."
    
    - name: Notify on failure
      if: needs.unit-tests.result == 'failure' || needs.security-tests.result == 'failure'
      run: |
        echo "❌ Tests failed! Check the logs for details."
        exit 1