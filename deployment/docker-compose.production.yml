version: '3.8'

services:
  # TradeMate Application Services
  gridworks-api:
    image: gridworks/api:${VERSION:-latest}
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    container_name: gridworks-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - WHATSAPP_WEBHOOK_VERIFY_TOKEN=${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      - WHATSAPP_APP_SECRET=${WHATSAPP_APP_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SETU_CLIENT_ID=${SETU_CLIENT_ID}
      - SETU_CLIENT_SECRET=${SETU_CLIENT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - AUDIT_ENCRYPTION_KEY=${AUDIT_ENCRYPTION_KEY}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - gridworks-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Luxury Black Tier Service
  gridworks-black:
    image: gridworks/black:${VERSION:-latest}
    build:
      context: ..
      dockerfile: deployment/Dockerfile.black
    container_name: gridworks-black
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/3
      - PRIVATE_BANKING_API_KEY=${PRIVATE_BANKING_API_KEY}
      - BUTLER_AI_MODEL_KEY=${BUTLER_AI_MODEL_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - HSM_KEY_ID=${HSM_KEY_ID}
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    networks:
      - gridworks-network
    volumes:
      - ./black-logs:/app/logs
      - ./secure-storage:/app/secure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard Service
  gridworks-admin:
    image: gridworks/admin:${VERSION:-latest}
    build:
      context: ..
      dockerfile: deployment/Dockerfile.admin
    container_name: gridworks-admin
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/4
      - ADMIN_SECRET_KEY=${ADMIN_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - redis
    networks:
      - gridworks-network
    volumes:
      - ./admin-logs:/app/logs
      - ./analytics-data:/app/analytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Task Workers
  celery-worker:
    image: gridworks/api:${VERSION:-latest}
    container_name: gridworks-celery-worker
    restart: unless-stopped
    command: celery -A app.core.celery worker -l info -Q billing,notifications,analytics
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SETU_CLIENT_ID=${SETU_CLIENT_ID}
      - SETU_CLIENT_SECRET=${SETU_CLIENT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - gridworks-network
    volumes:
      - ./worker-logs:/app/logs

  # Celery Beat Scheduler
  celery-beat:
    image: gridworks/api:${VERSION:-latest}
    container_name: gridworks-celery-beat
    restart: unless-stopped
    command: celery -A app.core.celery beat -l info
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - postgres
      - redis
    networks:
      - gridworks-network
    volumes:
      - ./beat-logs:/app/logs

  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: gridworks-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - gridworks-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
      - ./postgres-backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: gridworks-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    networks:
      - gridworks-network
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: gridworks-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - gridworks-api
      - gridworks-black
      - gridworks-admin
    networks:
      - gridworks-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl-certs:/etc/nginx/ssl
      - ./nginx-logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: gridworks-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - gridworks-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: gridworks-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - gridworks-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: gridworks-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - gridworks-network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: gridworks-logstash
    restart: unless-stopped
    depends_on:
      - elasticsearch
    networks:
      - gridworks-network
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: gridworks-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - gridworks-network
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  # Security & Backup Services
  vault:
    image: vault:latest
    container_name: gridworks-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    networks:
      - gridworks-network
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config
    cap_add:
      - IPC_LOCK

  # Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: gridworks-backup
    restart: "no"
    depends_on:
      - postgres
    networks:
      - gridworks-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
    volumes:
      - ./postgres-backups:/backups
      - ./backup-scripts:/scripts
    command: /scripts/backup.sh

networks:
  gridworks-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  vault_data:
    driver: local